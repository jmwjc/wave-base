
using Revise, ApproxOperator, BenchmarkTools, Printf, SparseArrays, Pardiso, TimerOutputs
include("input.jl")
elements,nodes,elms,nds = import_gauss_quadratic("./msh/test_50.msh","./msh/test_50.msh",:TriGI3)
# elements,nodes = ApproxOperator.importcomsol_fem("ÂúÜÂΩ¢È™®Êñô.mphtxt")
# nodes = ApproxOperator.importcomsol_fem("ÂúÜÂΩ¢È™®Êñô.mphtxt")

const to = TimerOutput()
ps = MKLPardisoSolver()
set_matrixtype!(ps,2)

n‚Çö = length(nodes)
n‚Çë = length(elements["Œ©"])
n‚Çí = length(nds)
n‚Çë‚Çí = length(elms["Œ©"])

s = 1.5*410/50*ones(n‚Çö)
push!(nodes,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)

@timeit to "shape function" begin
set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œì"])
setùù≠!(elements["Œì·µó"])
set‚àáùù≠!(elements["Œ©‚Çí"])
end

E = 3e6
ŒΩ = 0.3
C·µ¢·µ¢·µ¢·µ¢ = E/(1-ŒΩ^2)
C·µ¢·µ¢‚±º‚±º = E*ŒΩ/(1-ŒΩ^2)
C·µ¢‚±º·µ¢‚±º = E/2/(1+ŒΩ)

œÅ = 1.0

prescribe!(elements["Œì"],:g‚ÇÅ=>(x,y,z)->0.0)
prescribe!(elements["Œì"],:g‚ÇÇ=>(x,y,z)->0.0)
prescribe!(elements["Œì"],:n‚ÇÅ‚ÇÅ=>(x,y,z,n‚ÇÅ,n‚ÇÇ)->n‚ÇÅ*n‚ÇÅ)
prescribe!(elements["Œì"],:n‚ÇÅ‚ÇÇ=>(x,y,z,n‚ÇÅ,n‚ÇÇ)->n‚ÇÅ*n‚ÇÇ)
prescribe!(elements["Œì"],:n‚ÇÇ‚ÇÇ=>(x,y,z,n‚ÇÅ,n‚ÇÇ)->n‚ÇÇ*n‚ÇÇ)
prescribe!(elements["Œì·µó"],:t‚ÇÅ=>(x,y,z)->0.0)                 

ops = [
    Operator{:‚à´‚à´Œµ·µ¢‚±ºœÉ·µ¢‚±ºdxdy}(:E=>E,:ŒΩ=>ŒΩ),
    Operator{:‚à´v·µ¢g·µ¢ds}(:Œ±=>1e7*E),
    Operator{:‚à´v·µ¢t·µ¢ds}(),
    Operator{:‚à´‚à´œÅv·µ¢u·µ¢dxdy}(:œÅ=>œÅ)
]

@timeit to "assembly matrix" begin
# k = zeros(2*n‚Çö,2*n‚Çö)
# m = zeros(2*n‚Çö,2*n‚Çö)
# kŒ± = zeros(2*n‚Çö,2*n‚Çö)
k = spzeros(2*n‚Çö,2*n‚Çö)
m = spzeros(2*n‚Çö,2*n‚Çö)
f = zeros(2*n‚Çö)
fŒ± = zeros(2*n‚Çö)

ops[1](elements["Œ©"],k)
ops[4](elements["Œ©"],m)
ops[2](elements["Œì"],k,fŒ±)
end

d‚ÇÅ = zeros(n‚Çö)
d‚ÇÇ = zeros(n‚Çö)
push!(nodes,:d‚ÇÅ=>d‚ÇÅ,:d‚ÇÇ=>d‚ÇÇ)

F‚ÇÄ = 1
Œò = œÄ
Œ≤ = 0.25
Œ≥ = 0.5
ùëì = 100
force_time = 1/ùëì
Œît = œÄ*force_time/80
total_time = 250*Œît
times = 0.0:Œît:total_time
d = zeros(2n‚Çö)
v = zeros(2n‚Çö)
a = zeros(2n‚Çö)
a‚Çô = zeros(2n‚Çö)

u‚ÇÅ = zeros(n‚Çí)
u‚ÇÇ = zeros(n‚Çí)
œÉ‚ÇÅ‚ÇÅ = zeros(n‚Çí)
œÉ‚ÇÇ‚ÇÇ = zeros(n‚Çí)
œÉ‚ÇÅ‚ÇÇ = zeros(n‚Çí)
for (n,t) in enumerate(times)

    if t ‚â§ force_time
        prescribe!(elements["Œì·µó"],:t‚ÇÇ=>(x,y,z)->F‚ÇÄ*sin(2Œò*ùëì*t))
    else
        prescribe!(elements["Œì·µó"],:t‚ÇÇ=>(x,y,z)->0.0)
    end
    fill!(f,0.0)
    ops[3](elements["Œì·µó"],f)

    @timeit to "solve" begin
    # predictor phase
    global d .+= Œît*v + Œît^2/2.0*(1.0-2.0*Œ≤)*a‚Çô
    global v .+= Œît*(1.0-Œ≥)*a‚Çô
    # a = (m + Œ≤*Œît^2*k)\(f+fŒ±-k*d)
    solve!(ps,a,m + Œ≤*Œît^2*k,f+fŒ±-k*d)

    # Corrector phase
    global d .+= Œ≤*Œît^2*a 
    global v .+= Œ≥*Œît*a
    global a‚Çô .= a
    end


    @timeit to "output" begin
    d‚ÇÅ .= d[1:2:2*n‚Çö]
    d‚ÇÇ .= d[2:2:2*n‚Çö]

    fill!(u‚ÇÅ,0.0)
    fill!(u‚ÇÇ,0.0)
    fill!(œÉ‚ÇÅ‚ÇÅ,0.0)
    fill!(œÉ‚ÇÇ‚ÇÇ,0.0)
    fill!(œÉ‚ÇÅ‚ÇÇ,0.0)
    for (j,p) in enumerate(elements["Œ©‚Çí"])
        Œæ, = p.ùìñ
        N = Œæ[:ùù≠]
        B‚ÇÅ = Œæ[:‚àÇùù≠‚àÇx]
        B‚ÇÇ = Œæ[:‚àÇùù≠‚àÇy]
        Œµ‚ÇÅ‚ÇÅ = 0.0
        Œµ‚ÇÇ‚ÇÇ = 0.0
        Œµ‚ÇÅ‚ÇÇ = 0.0
        for (i,x·µ¢) in enumerate(p.ùìí)
            u‚ÇÅ[j] += N[i]*x·µ¢.d‚ÇÅ
            u‚ÇÇ[j] += N[i]*x·µ¢.d‚ÇÇ
            Œµ‚ÇÅ‚ÇÅ += B‚ÇÅ[i]*x·µ¢.d‚ÇÅ
            Œµ‚ÇÇ‚ÇÇ += B‚ÇÇ[i]*x·µ¢.d‚ÇÇ
            Œµ‚ÇÅ‚ÇÇ += B‚ÇÅ[i]*x·µ¢.d‚ÇÇ + B‚ÇÇ[i]*x·µ¢.d‚ÇÅ
        end
        œÉ‚ÇÅ‚ÇÅ[j] = C·µ¢·µ¢·µ¢·µ¢*Œµ‚ÇÅ‚ÇÅ+C·µ¢·µ¢‚±º‚±º*Œµ‚ÇÇ‚ÇÇ
        œÉ‚ÇÇ‚ÇÇ[j] = C·µ¢·µ¢‚±º‚±º*Œµ‚ÇÅ‚ÇÅ+C·µ¢·µ¢·µ¢·µ¢*Œµ‚ÇÇ‚ÇÇ
        œÉ‚ÇÅ‚ÇÇ[j] = C·µ¢‚±º·µ¢‚±º*Œµ‚ÇÅ‚ÇÇ
    end

    fo = open("./vtk/50/figure"*string(n,pad=4)*".vtk","w")
    @printf fo "# vtk DataFile Version 2.0\n"
    @printf fo "Test\n"
    @printf fo "ASCII\n"
    @printf fo "DATASET POLYDATA\n"
    @printf fo "POINTS %i float\n" n‚Çí
    for p in nds
        @printf fo "%f %f %f\n" p.x p.y p.z
    end
    @printf fo "POLYGONS %i %i\n" n‚Çë‚Çí 4*n‚Çë‚Çí
    for ap in elms["Œ©"]
        ùìí = ap.vertices
        @printf fo "%i %i %i %i\n" 3 (x.i-1 for x in ùìí)...
    end
    @printf fo "POINT_DATA %i\n" n‚Çí
    @printf fo "SCALARS UX float 1\n"
    @printf fo "LOOKUP_TABLE default\n"
    for i in 1:n‚Çí
        @printf fo "%f\n" u‚ÇÅ[i]
    end
    @printf fo "SCALARS UY float 1\n"
    @printf fo "LOOKUP_TABLE default\n"
    for i in 1:n‚Çí
        @printf fo "%f\n" u‚ÇÇ[i]
    end
    @printf fo "TENSORS STRESS float\n"
    for i in 1:n‚Çí
        @printf fo "%f %f %f\n" œÉ‚ÇÅ‚ÇÅ[i] œÉ‚ÇÅ‚ÇÇ[i] 0.0
        @printf fo "%f %f %f\n" œÉ‚ÇÅ‚ÇÇ[i] œÉ‚ÇÇ‚ÇÇ[i] 0.0
        @printf fo "%f %f %f\n" 0.0 0.0 0.0
    end
    close(fo)
    end
end
show(to)